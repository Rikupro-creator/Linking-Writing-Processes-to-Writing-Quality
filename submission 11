{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":59291,"databundleVersionId":6678907,"sourceType":"competition"}],"dockerImageVersionId":30559,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Linking Writing processes to writing quality","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"# Import the necessary packages needed for this analysis","metadata":{"execution":{"iopub.status.busy":"2023-10-14T06:24:28.477946Z","iopub.execute_input":"2023-10-14T06:24:28.478308Z","iopub.status.idle":"2023-10-14T06:24:28.502792Z","shell.execute_reply.started":"2023-10-14T06:24:28.478271Z","shell.execute_reply":"2023-10-14T06:24:28.501776Z"}}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:18.597337Z","iopub.execute_input":"2023-10-18T14:37:18.597626Z","iopub.status.idle":"2023-10-18T14:37:19.311887Z","shell.execute_reply.started":"2023-10-18T14:37:18.597603Z","shell.execute_reply":"2023-10-18T14:37:19.311083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_log=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/train_logs.csv')\ntrain_log.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:19.313323Z","iopub.execute_input":"2023-10-18T14:37:19.313755Z","iopub.status.idle":"2023-10-18T14:37:27.518833Z","shell.execute_reply.started":"2023-10-18T14:37:19.31373Z","shell.execute_reply":"2023-10-18T14:37:27.51762Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_scores=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/train_scores.csv')\ntrain_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.520068Z","iopub.execute_input":"2023-10-18T14:37:27.520334Z","iopub.status.idle":"2023-10-18T14:37:27.532821Z","shell.execute_reply.started":"2023-10-18T14:37:27.520314Z","shell.execute_reply":"2023-10-18T14:37:27.532047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# lets read in the test data\ntest=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/test_logs.csv')\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.534923Z","iopub.execute_input":"2023-10-18T14:37:27.535231Z","iopub.status.idle":"2023-10-18T14:37:27.549759Z","shell.execute_reply.started":"2023-10-18T14:37:27.535207Z","shell.execute_reply":"2023-10-18T14:37:27.548867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_log.columns==test.columns","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.550753Z","iopub.execute_input":"2023-10-18T14:37:27.550994Z","iopub.status.idle":"2023-10-18T14:37:27.558651Z","shell.execute_reply.started":"2023-10-18T14:37:27.550972Z","shell.execute_reply":"2023-10-18T14:37:27.557984Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_log.shape, test.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.55962Z","iopub.execute_input":"2023-10-18T14:37:27.55985Z","iopub.status.idle":"2023-10-18T14:37:27.570437Z","shell.execute_reply.started":"2023-10-18T14:37:27.559832Z","shell.execute_reply":"2023-10-18T14:37:27.569772Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" What I note is that the score is the same. That means that the score is for the final paper. The other variables keep changing.  Lets confirm this by looking at the second student \n \n In light of this, we have to aggregate the data in terms of  each student. This will make it easy in terms  of the  final predictions. ","metadata":{}},{"cell_type":"markdown","source":"# Aggregating the data","metadata":{}},{"cell_type":"markdown","source":"## lets start with aggregating the numerical data","metadata":{}},{"cell_type":"code","source":"# create a function that can be applied also to the test dataset\n\ndef aggregation(data):\n    numeric = data.select_dtypes('int64')\n    numeric['id'] = data['id']\n    \n    means = numeric.groupby('id').mean()\n    stds = numeric.groupby('id').std()\n    medians = numeric.groupby('id').median()\n    mins = numeric.groupby('id').min()\n    maxs = numeric.groupby('id').max()\n    \n    means.columns = [col + '_means' for col in means.columns]\n    stds.columns = [col + '_stds' for col in stds.columns]\n    medians.columns = [col + '_medians' for col in medians.columns]\n    mins.columns = [col + '_mins' for col in mins.columns]\n    maxs.columns = [col + '_maxs' for col in maxs.columns]\n    result = pd.concat([means, stds, medians, mins, maxs], axis=1)\n    \n    return result\n\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.571342Z","iopub.execute_input":"2023-10-18T14:37:27.571643Z","iopub.status.idle":"2023-10-18T14:37:27.581963Z","shell.execute_reply.started":"2023-10-18T14:37:27.571613Z","shell.execute_reply":"2023-10-18T14:37:27.581236Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n\n\ndef character_aggregation(data):\n    character_df = data.select_dtypes('object')\n    character_df['id'] = data['id']\n    result=character_df.groupby('id').nunique()\n    \n    \n    return result","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.583054Z","iopub.execute_input":"2023-10-18T14:37:27.583301Z","iopub.status.idle":"2023-10-18T14:37:27.597193Z","shell.execute_reply.started":"2023-10-18T14:37:27.583281Z","shell.execute_reply":"2023-10-18T14:37:27.596457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# now we creatfe a final function\ndef feature_extraction(data):\n    numeric_df_clean= aggregation(data)\n    character_df_clean=character_aggregation(data)\n    result = numeric_df_clean.merge(character_df_clean, on='id', how='inner')\n    return  result\ntrain=feature_extraction(train_log)\ntrain=pd.merge(train, train_scores,on='id')\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:27.5983Z","iopub.execute_input":"2023-10-18T14:37:27.598533Z","iopub.status.idle":"2023-10-18T14:37:37.821769Z","shell.execute_reply.started":"2023-10-18T14:37:27.598513Z","shell.execute_reply":"2023-10-18T14:37:37.820981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"desired_row_count = 10000\nnum_samples = desired_row_count - 2000  \n\nbootstrapped_data = train.copy()  \n\n# Perform bootstrapping to generate additional rows\nfor _ in range(num_samples):\n    bootstrap_sample = train.sample(n=1, replace=True)  # Sample one row with replacement\n    bootstrapped_data = pd.concat([bootstrapped_data, bootstrap_sample], ignore_index=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:37.824215Z","iopub.execute_input":"2023-10-18T14:37:37.824536Z","iopub.status.idle":"2023-10-18T14:37:44.129532Z","shell.execute_reply.started":"2023-10-18T14:37:37.824513Z","shell.execute_reply":"2023-10-18T14:37:44.128838Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"bootstrapped_data.columns","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:44.130631Z","iopub.execute_input":"2023-10-18T14:37:44.130855Z","iopub.status.idle":"2023-10-18T14:37:44.135202Z","shell.execute_reply.started":"2023-10-18T14:37:44.130835Z","shell.execute_reply":"2023-10-18T14:37:44.134695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y=bootstrapped_data['score']\nX=bootstrapped_data.drop(['score', 'id'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:44.136124Z","iopub.execute_input":"2023-10-18T14:37:44.136507Z","iopub.status.idle":"2023-10-18T14:37:44.149695Z","shell.execute_reply.started":"2023-10-18T14:37:44.136485Z","shell.execute_reply":"2023-10-18T14:37:44.148899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:44.150677Z","iopub.execute_input":"2023-10-18T14:37:44.15089Z","iopub.status.idle":"2023-10-18T14:37:44.165349Z","shell.execute_reply.started":"2023-10-18T14:37:44.150871Z","shell.execute_reply":"2023-10-18T14:37:44.16452Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:37:44.166211Z","iopub.execute_input":"2023-10-18T14:37:44.166414Z","iopub.status.idle":"2023-10-18T14:37:44.178366Z","shell.execute_reply.started":"2023-10-18T14:37:44.166397Z","shell.execute_reply":"2023-10-18T14:37:44.177717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Fitting a Random forest regressor","metadata":{}},{"cell_type":"code","source":"Reg=RandomForestRegressor()\nReg.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:38:30.093963Z","iopub.execute_input":"2023-10-18T14:38:30.094557Z","iopub.status.idle":"2023-10-18T14:38:41.756321Z","shell.execute_reply.started":"2023-10-18T14:38:30.094529Z","shell.execute_reply":"2023-10-18T14:38:41.755123Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_preds=Reg.predict(X_test)\nmean_absolute_error(y_test, y_preds)","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:38:46.353867Z","iopub.execute_input":"2023-10-18T14:38:46.354182Z","iopub.status.idle":"2023-10-18T14:38:46.405841Z","shell.execute_reply.started":"2023-10-18T14:38:46.354157Z","shell.execute_reply":"2023-10-18T14:38:46.405159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:38:52.494595Z","iopub.execute_input":"2023-10-18T14:38:52.495127Z","iopub.status.idle":"2023-10-18T14:38:52.505132Z","shell.execute_reply.started":"2023-10-18T14:38:52.495099Z","shell.execute_reply":"2023-10-18T14:38:52.50451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data=feature_extraction(test)\npreds=Reg.predict(test_data)\npreds","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:39:02.034871Z","iopub.execute_input":"2023-10-18T14:39:02.035198Z","iopub.status.idle":"2023-10-18T14:39:02.057576Z","shell.execute_reply.started":"2023-10-18T14:39:02.035175Z","shell.execute_reply":"2023-10-18T14:39:02.056754Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission=pd.DataFrame({'id':test_data.index, 'score':preds})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2023-10-18T14:39:06.062248Z","iopub.execute_input":"2023-10-18T14:39:06.063063Z","iopub.status.idle":"2023-10-18T14:39:06.069347Z","shell.execute_reply.started":"2023-10-18T14:39:06.063031Z","shell.execute_reply":"2023-10-18T14:39:06.068503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}