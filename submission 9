{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":59291,"databundleVersionId":6678907,"sourceType":"competition"}],"dockerImageVersionId":30558,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Linking Writing processes to writing quality","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"# Import the necessary packages needed for this analysis","metadata":{"execution":{"iopub.status.busy":"2023-10-14T06:24:28.477946Z","iopub.execute_input":"2023-10-14T06:24:28.478308Z","iopub.status.idle":"2023-10-14T06:24:28.502792Z","shell.execute_reply.started":"2023-10-14T06:24:28.478271Z","shell.execute_reply":"2023-10-14T06:24:28.501776Z"}}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression ","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:23.378594Z","iopub.execute_input":"2023-10-19T22:31:23.378907Z","iopub.status.idle":"2023-10-19T22:31:24.476437Z","shell.execute_reply.started":"2023-10-19T22:31:23.378883Z","shell.execute_reply":"2023-10-19T22:31:24.475140Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_log=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/train_logs.csv')\ntrain_log.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:09.418539Z","iopub.status.idle":"2023-10-19T22:31:09.418927Z","shell.execute_reply.started":"2023-10-19T22:31:09.418774Z","shell.execute_reply":"2023-10-19T22:31:09.418789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_scores=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/train_scores.csv')\ntrain_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:09.420959Z","iopub.status.idle":"2023-10-19T22:31:09.421363Z","shell.execute_reply.started":"2023-10-19T22:31:09.421206Z","shell.execute_reply":"2023-10-19T22:31:09.421222Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# lets read in the test data\ntest=pd.read_csv('/kaggle/input/linking-writing-processes-to-writing-quality/test_logs.csv')\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:09.422497Z","iopub.status.idle":"2023-10-19T22:31:09.423000Z","shell.execute_reply.started":"2023-10-19T22:31:09.422781Z","shell.execute_reply":"2023-10-19T22:31:09.422805Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_log.columns==test.columns","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:09.424177Z","iopub.status.idle":"2023-10-19T22:31:09.424445Z","shell.execute_reply.started":"2023-10-19T22:31:09.424326Z","shell.execute_reply":"2023-10-19T22:31:09.424339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_log.shape, test.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-19T22:31:12.623186Z","iopub.execute_input":"2023-10-19T22:31:12.623485Z","iopub.status.idle":"2023-10-19T22:31:12.640876Z","shell.execute_reply.started":"2023-10-19T22:31:12.623464Z","shell.execute_reply":"2023-10-19T22:31:12.639430Z"},"trusted":true},"execution_count":2,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mtrain_log\u001b[49m\u001b[38;5;241m.\u001b[39mshape, test\u001b[38;5;241m.\u001b[39mshape\n","\u001b[0;31mNameError\u001b[0m: name 'train_log' is not defined"],"ename":"NameError","evalue":"name 'train_log' is not defined","output_type":"error"}]},{"cell_type":"markdown","source":" What I note is that the score is the same. That means that the score is for the final paper. The other variables keep changing.  Lets confirm this by looking at the second student \n \n In light of this, we have to aggregate the data in terms of  each student. This will make it easy in terms  of the  final predictions. ","metadata":{}},{"cell_type":"markdown","source":"# Aggregating the data","metadata":{}},{"cell_type":"markdown","source":"## lets start with aggregating the numerical data","metadata":{}},{"cell_type":"code","source":"# create a function that can be applied also to the test dataset\n\ndef aggregation(data):\n    numeric = data.select_dtypes('int64')\n    numeric['id'] = data['id']\n    \n    means = numeric.groupby('id').mean()\n    stds = numeric.groupby('id').std()\n    medians = numeric.groupby('id').median()\n    mins = numeric.groupby('id').min()\n    maxs = numeric.groupby('id').max()\n    \n    means.columns = [col + '_means' for col in means.columns]\n    stds.columns = [col + '_stds' for col in stds.columns]\n    medians.columns = [col + '_medians' for col in medians.columns]\n    mins.columns = [col + '_mins' for col in mins.columns]\n    maxs.columns = [col + '_maxs' for col in maxs.columns]\n    result = pd.concat([means, stds, medians, mins, maxs], axis=1)\n    \n    return result\n\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:06.179254Z","iopub.execute_input":"2023-10-17T00:38:06.179618Z","iopub.status.idle":"2023-10-17T00:38:06.186850Z","shell.execute_reply.started":"2023-10-17T00:38:06.179591Z","shell.execute_reply":"2023-10-17T00:38:06.185917Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n\n\ndef character_aggregation(data):\n    character_df = data.select_dtypes('object')\n    character_df['id'] = data['id']\n    result=character_df.groupby('id').nunique()\n    \n    \n    return result","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:09.407292Z","iopub.execute_input":"2023-10-17T00:38:09.407714Z","iopub.status.idle":"2023-10-17T00:38:09.413635Z","shell.execute_reply.started":"2023-10-17T00:38:09.407684Z","shell.execute_reply":"2023-10-17T00:38:09.412430Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# now we creatfe a final function\ndef feature_extraction(data):\n    numeric_df_clean= aggregation(data)\n    character_df_clean=character_aggregation(data)\n    result = numeric_df_clean.merge(character_df_clean, on='id', how='inner')\n    return  result\ntrain=feature_extraction(train_log)\n    ","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:13.728841Z","iopub.execute_input":"2023-10-17T00:38:13.729356Z","iopub.status.idle":"2023-10-17T00:38:25.750483Z","shell.execute_reply.started":"2023-10-17T00:38:13.729318Z","shell.execute_reply":"2023-10-17T00:38:25.749091Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:25.752219Z","iopub.execute_input":"2023-10-17T00:38:25.752645Z","iopub.status.idle":"2023-10-17T00:38:25.777352Z","shell.execute_reply.started":"2023-10-17T00:38:25.752617Z","shell.execute_reply":"2023-10-17T00:38:25.776398Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"y=train_scores['score']\nX=train","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:25.778427Z","iopub.execute_input":"2023-10-17T00:38:25.779665Z","iopub.status.idle":"2023-10-17T00:38:25.785689Z","shell.execute_reply.started":"2023-10-17T00:38:25.779617Z","shell.execute_reply":"2023-10-17T00:38:25.784028Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:25.788663Z","iopub.execute_input":"2023-10-17T00:38:25.789164Z","iopub.status.idle":"2023-10-17T00:38:25.806861Z","shell.execute_reply.started":"2023-10-17T00:38:25.789123Z","shell.execute_reply":"2023-10-17T00:38:25.805888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:25.808777Z","iopub.execute_input":"2023-10-17T00:38:25.809210Z","iopub.status.idle":"2023-10-17T00:38:25.825670Z","shell.execute_reply.started":"2023-10-17T00:38:25.809172Z","shell.execute_reply":"2023-10-17T00:38:25.824679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Fitting a Random forest regressor","metadata":{}},{"cell_type":"code","source":"Reg=LinearRegression()\nReg.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:38:56.901611Z","iopub.execute_input":"2023-10-17T00:38:56.902091Z","iopub.status.idle":"2023-10-17T00:38:56.955569Z","shell.execute_reply.started":"2023-10-17T00:38:56.902054Z","shell.execute_reply":"2023-10-17T00:38:56.954377Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_preds=Reg.predict(X_test)\nmean_absolute_error(y_test, y_preds)","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:39:03.896970Z","iopub.execute_input":"2023-10-17T00:39:03.897410Z","iopub.status.idle":"2023-10-17T00:39:03.916871Z","shell.execute_reply.started":"2023-10-17T00:39:03.897377Z","shell.execute_reply":"2023-10-17T00:39:03.914716Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test","metadata":{"execution":{"iopub.status.busy":"2023-10-17T00:39:12.259357Z","iopub.execute_input":"2023-10-17T00:39:12.259747Z","iopub.status.idle":"2023-10-17T00:39:12.273909Z","shell.execute_reply.started":"2023-10-17T00:39:12.259720Z","shell.execute_reply":"2023-10-17T00:39:12.272594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data=feature_extraction(test)\npreds=Reg.predict(test_data)\npreds","metadata":{"execution":{"iopub.status.busy":"2023-10-14T09:10:44.129144Z","iopub.execute_input":"2023-10-14T09:10:44.129573Z","iopub.status.idle":"2023-10-14T09:10:44.158609Z","shell.execute_reply.started":"2023-10-14T09:10:44.12953Z","shell.execute_reply":"2023-10-14T09:10:44.157661Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission=pd.DataFrame({'id':test_data.index, 'score':preds})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2023-10-14T09:23:22.769198Z","iopub.execute_input":"2023-10-14T09:23:22.771107Z","iopub.status.idle":"2023-10-14T09:23:22.780178Z","shell.execute_reply.started":"2023-10-14T09:23:22.771063Z","shell.execute_reply":"2023-10-14T09:23:22.779047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}